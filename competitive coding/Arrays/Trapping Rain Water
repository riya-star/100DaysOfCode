****************************************************************************************************************************************************
Given an array arr[] of N non-negative integers representing the height of blocks at index i as Ai where the width of each block is 1. Compute
how much water can be trapped in between blocks after raining.
The structure is like below:
|  |
|_|
We can trap 2 units of water in the middle gap.



Example 1:

Input:
N = 4
arr[] = {7,4,0,9}
Output: 10
Explanation: Water trapped by the 
block of height 4 is 3 units, block 
of height 0 is 7 units. So, the 
total unit of water trapped is 
10 units.
Example 2:

Input:
N = 3
arr[] = {6,9,9}
Output: 0
Explanation: No water will be trapped.
Your Task:
The task is to complete the function trappingWater() which returns the total amount of water that can be trapped.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
3 <= N <= 107
0 <= Ai <= 108
*******************************************************************************************************************************************

/ function to find the trapped water in between buildings
// arr: input array
// n: size of array
int trappingWater(int arr[], int n){
    int lmax[n],rmax[n],sum=0;
    lmax[0]=arr[0];
    rmax[n-1]=arr[n-1];
    for(int i=1;i<n;i++)
    {
        lmax[i]=max(lmax[i-1],arr[i]);
    }
    for(int i=n-2;i>=0;i--)
    {
      rmax[i]=max(rmax[i+1],arr[i]);
    }
    
    for(int i=0;i<n;i++)
    {
        sum+=(min(lmax[i],rmax[i])-arr[i]);
    }
    return sum;

    // Your code here
    
}
