**************************************************************************************************************************
Given a sorted array of positive integers (elements may be repeated) and a number x. The task is to find the leftmost index 
of x in the given array.

Example 1:

Input:
N = 10
arr[] = {1,1,2,2,3,4,5,5,6,7}
X = 1
Output: 0
Explanation: 1 is present two times
in the array and its leftmost index 
is 0.
Example 2:

Input:
N = 7
arr[] = {10,20,20,20,20,20,20}
X = 20
Output: 1
Explanation: 20 is present 5 time, 
but its leftmost index is 1.
Your Task:
The task is to complete the function leftIndex() which takes the array arr[], its size N and an integer X as inputs and 
returns the index of leftmost occurrence of X in given input array. It returns -1 if element is not present in the array.

Expected Time Complexity: O(LogN).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 106
1 <= arr[i] <= 106
1 <= x <= 106
********************************************************************************************************************************

int leftIndex(int sizeOfArray, int arr[], int elementToSearch){
    if(sizeOfArray==1){
        if(arr[0]==elementToSearch){
            return 0;
        }
        else
        {
            return -1;
        }
    }
    else{
        
        int l=0,h=sizeOfArray-1;
        while(l<=h){
            int mid=(l+h)/2;
            if((arr[mid]==elementToSearch)&&(arr[mid-1]!=elementToSearch))
            {
                return mid;
            }
            else
            if(arr[mid]>=elementToSearch)
            {
                h=mid-1;
            }
            else
            {
              l=mid+1;  
            }
        
     }
     return -1;
    }
    
    
}
