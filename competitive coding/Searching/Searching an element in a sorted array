****************************************************************************************************************************************
Given a sorted array and an integer element. The task is to check if the element is present in the array or not.

Example 1:

Input:
N = 5, K = 6
arr[] = {1,2,3,4,6}
Output: 1
Exlpanation: Since, 6 is present in 
the array at index 4 (0-based indexing),
so output is 1.
Example 2:

Input:
N = 5, K = 2
arr[] = {1,3,4,5,6}
Output: -1
Exlpanation: Since, 2 is not present 
in the array, so output is -1.
Your Task:
The task is to complete the function searchInSorted() which takes the sorted array arr[], its size N and the element K as inputs and
returns 1 if the element is present in the array, else it returns -1. 

Expected Time Complexity: O(Log N).
Expected Auxiliary Space: O(1). 

Constraints:
1 <= N <= 106
1 <= K <= 106
1 <= arr[i] <= 106
**********************************************************************************************************************************************

int searchInSorted(int arr[], int n, int x) 
{ 

   int l=0,h=n-1;
   
   while(l<=h)
   {
       int mid=(l+h)/2;
       if(arr[mid]==x)
       {
           return 1;
       }
       else
       if(x>arr[mid])
       {
           l=mid+1;
       }
       else
       {
           h=mid-1;
       }
   }
   return -1;
   
}
