*************************************************************************************************************************
Given a sorted array arr[] of size N without duplicates, and given a value x. Find the floor of x in given array. 
Floor of x is defined as the largest element K in arr[] such that K is smaller than or equal to x.

Example 1:

Input:
N = 7, x = 0 
arr[] = {1,2,8,10,11,12,19}
Output: -1
Explanation: No element less 
than 0 is found. So output 
is "-1".
Example 2:

Input:
N = 7, x = 5 
arr[] = {1,2,8,10,11,12,19}
Output: 1
Explanation: Number less than 5
 is 2, whose index is 1(0-based 
indexing).
Your Task:
The task is to complete the function findFloor() which returns the floor of x or return -1 if there isn't any such number.

Expected Time Complexity: O(log N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ N ≤ 107
1 ≤ arr[i] ≤ 1018
0 ≤ X ≤ arr[n-1]
*********************************************************************************************************************************

int findFloor(vector<long long> v, long long n, long long x){
    long long int res=0;
    for(int i=0;i<n;i++)
    {
        if(v[i]>x)
        {
            res=i-1;
            return res ;
        }
        else
        if(v[i]==v[n-1])
        {
            res=n-1;
            return res;
        }
    }
    return -1;

    
}
