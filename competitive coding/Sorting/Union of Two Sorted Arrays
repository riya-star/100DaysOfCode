***************************************************************************************************************************
Given two sorted arrays arr[] and brr[] of size N and M respectively. The task is to find the union of these two arrays.
Union of two arrays can be defined as the common and distinct elements in the two arrays.

Example 1:

Input: 
N = 5, arr1[] = {1, 2, 3, 4, 5}  
M = 3, arr2 [] = {1, 2, 3}
Output: 1 2 3 4 5
Explanation: Distinct elements including 
both the arrays are: 1 2 3 4 5.
Example 2:

Input: 
N = 5, arr1[] = {2, 2, 3, 4, 5}  
M = 5, arr2[] = {1, 1, 2, 3, 4}
Output: 1 2 3 4 5
Explanation: Distinct elements including 
both the arrays are: 1 2 3 4 5.
Example 3:

Input:
N = 5, arr1[] = {1, 1, 1, 1, 1}
M = 5, arr2[] = {2, 2, 2, 2, 2}
Output: 1 2
Explanation: Distinct elements including 
both the arrays are: 1 2.

Your Task: This is a function problem. You only need to complete the function findUnion() that takes two arrays arr1[], 
arr2[], and their size N and M as parameters and returns the union of two arrays. The new line is automatically appended
by the driver code.

Expected Time Complexity: O(N+M).
Expected Auxiliary Space: O(N+M).

Constraints:
1 <= N, M <= 105
1 <= arr[i], brr[i] <= 106
*****************************************************************************************************************************
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
{
    vector<int> res;
    int i=0,j=0;
    while(i<n&&j<m)
    {
        if((arr1[i-1]==arr1[i])&&(i>0)){i++;continue;}
        if((arr2[j-1]==arr2[j])&&(j>0)){j++;continue;}
        if(arr1[i]==arr2[j])
        {
              res.push_back(arr1[i]);
            i++;j++;
        }
        else
        if(arr1[i]<arr2[j])
        {
              res.push_back(arr1[i]);
              i++;
        }
        else
        {
              res.push_back(arr2[j]);
              j++;
        }
    }
    while(i<n){
        if(i==0||(arr1[i-1]!=arr1[i]))
        {
            res.push_back(arr1[i]);
            
            
        }
      i++;  
    }
    while(j<m){
        if(j==0||(arr2[j-1]!=arr2[j]))
        {
            res.push_back(arr2[j]);
         
            
        }
          j++; 
    }
    return res;
}
